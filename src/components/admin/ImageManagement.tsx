import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Upload, Trash2, Eye, Monitor, Smartphone, Image, Info, Car, Zap, FileImage } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import { convertToWebP, shouldConvertToWebP, formatFileSize, ConversionResult } from "@/utils/imageConverter";

interface WebsiteImage {
  id: string;
  name: string;
  url: string;
  mobile_url?: string;
  category: string;
  recommended_size: string;
  description: string;
  file_name?: string;
  file_size?: number;
  created_at: string;
}

interface ConversionStatus {
  desktop?: ConversionResult;
  mobile?: ConversionResult;
  isConverting: boolean;
}

const ImageManagement = () => {
  const { toast } = useToast();
  const [images, setImages] = useState<WebsiteImage[]>([]);
  const [loading, setLoading] = useState(true);
  const [uploading, setUploading] = useState(false);
  const [conversionStatus, setConversionStatus] = useState<ConversionStatus>({ isConverting: false });
  const [uploadForm, setUploadForm] = useState({
    name: "",
    category: "general",
    carModel: "",
    description: "",
    desktopFile: null as File | null,
    mobileFile: null as File | null
  });

  const carModels = [
    { value: "coolray", label: "Geely Coolray" },
    { value: "monjaro", label: "Geely Monjaro" },
    { value: "ex5", label: "Geely EX5" },
    { value: "general", label: "Chung (t·∫•t c·∫£ xe)" }
  ];

  const imageCategories = [
    { 
      value: "hero", 
      label: "üéØ Hero Banner - Trang ch·ªß", 
      size: "1920x1080 (Mobile: 768x1024)", 
      description: "H√¨nh ·∫£nh banner ch√≠nh trang ch·ªß - hi·ªÉn th·ªã ·ªü carousel ƒë·∫ßu trang",
      position: "Trang ch·ªß - Banner carousel ch√≠nh (t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi)",
      usage: "Hi·ªÉn th·ªã l√†m h√¨nh n·ªÅn ch√≠nh, k√®m th√¥ng tin xe v√† n√∫t CTA",
      requiresCar: true
    },
    { 
      value: "car", 
      label: "üöó Th∆∞ vi·ªán xe", 
      size: "1920x1080", 
      description: "H√¨nh ·∫£nh chi ti·∫øt s·∫£n ph·∫©m xe cho trang chi ti·∫øt",
      position: "Trang chi ti·∫øt xe - Gallery carousel",
      usage: "Hi·ªÉn th·ªã trong gallery chi ti·∫øt t·ª´ng d√≤ng xe",
      requiresCar: true
    },
    { 
      value: "promotion", 
      label: "üéÅ Khuy·∫øn m√£i", 
      size: "400x250", 
      description: "H√¨nh ·∫£nh khuy·∫øn m√£i, ∆∞u ƒë√£i",
      position: "Trang ch·ªß - Ph·∫ßn khuy·∫øn m√£i, trang khuy·∫øn m√£i ri√™ng",
      usage: "Hi·ªÉn th·ªã trong card khuy·∫øn m√£i",
      requiresCar: false
    },
    { 
      value: "news", 
      label: "üì∞ Tin t·ª©c", 
      size: "400x250", 
      description: "H√¨nh ·∫£nh tin t·ª©c, blog",
      position: "Trang ch·ªß - Ph·∫ßn tin t·ª©c, trang tin t·ª©c ri√™ng",
      usage: "Hi·ªÉn th·ªã l√†m thumbnail cho b√†i vi·∫øt",
      requiresCar: false
    },
    { 
      value: "gallery", 
      label: "üñºÔ∏è Th∆∞ vi·ªán chung", 
      size: "600x400", 
      description: "H√¨nh ·∫£nh th∆∞ vi·ªán, album",
      position: "Trang gallery, album h√¨nh ·∫£nh",
      usage: "Hi·ªÉn th·ªã trong b·ªô s∆∞u t·∫≠p h√¨nh ·∫£nh",
      requiresCar: false
    },
    { 
      value: "general", 
      label: "üìé T·ªïng qu√°t", 
      size: "T√πy ch·ªânh", 
      description: "H√¨nh ·∫£nh kh√°c",
      position: "C√°c v·ªã tr√≠ kh√°c tr√™n website",
      usage: "S·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch chung",
      requiresCar: false
    }
  ];

  useEffect(() => {
    fetchImages();
  }, []);

  const fetchImages = async () => {
    try {
      const { data, error } = await supabase
        .from('website_images')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setImages(data || []);
    } catch (error) {
      console.error('Error fetching images:', error);
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch h√¨nh ·∫£nh",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = async (file: File | null, type: 'desktop' | 'mobile') => {
    if (!file) return;

    if (shouldConvertToWebP(file)) {
      setConversionStatus(prev => ({ ...prev, isConverting: true }));
      
      try {
        const result = await convertToWebP(file);
        
        setConversionStatus(prev => ({ 
          ...prev, 
          [type]: result,
          isConverting: false 
        }));

        // Update the form with converted file
        setUploadForm(prev => ({ 
          ...prev, 
          [type === 'desktop' ? 'desktopFile' : 'mobileFile']: result.convertedFile 
        }));

        toast({
          title: "‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!",
          description: `${file.name} ‚Üí WebP (ti·∫øt ki·ªám ${result.compressionRatio}% dung l∆∞·ª£ng)`,
        });
      } catch (error) {
        console.error('Conversion error:', error);
        setConversionStatus(prev => ({ ...prev, isConverting: false }));
        
        // Use original file if conversion fails
        setUploadForm(prev => ({ 
          ...prev, 
          [type === 'desktop' ? 'desktopFile' : 'mobileFile']: file 
        }));

        toast({
          title: "‚ö†Ô∏è L∆∞u √Ω",
          description: "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi sang WebP, s·ª≠ d·ª•ng file g·ªëc",
          variant: "destructive"
        });
      }
    } else {
      // For non-convertible files, use as is
      setUploadForm(prev => ({ 
        ...prev, 
        [type === 'desktop' ? 'desktopFile' : 'mobileFile']: file 
      }));
    }
  };

  const uploadFileToStorage = async (file: File, fileName: string): Promise<string> => {
    const { data, error } = await supabase.storage
      .from('website-images')
      .upload(fileName, file, {
        cacheControl: '3600',
        upsert: false
      });

    if (error) throw error;

    const { data: urlData } = supabase.storage
      .from('website-images')
      .getPublicUrl(data.path);

    return urlData.publicUrl;
  };

  const handleUpload = async () => {
    if (!uploadForm.name || !uploadForm.desktopFile) {
      toast({
        title: "Thi·∫øu th√¥ng tin",
        description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t√™n v√† ch·ªçn file h√¨nh ·∫£nh PC",
        variant: "destructive"
      });
      return;
    }

    const selectedCategory = imageCategories.find(cat => cat.value === uploadForm.category);
    if (selectedCategory?.requiresCar && !uploadForm.carModel) {
      toast({
        title: "Thi·∫øu th√¥ng tin",
        description: "Vui l√≤ng ch·ªçn d√≤ng xe cho danh m·ª•c n√†y",
        variant: "destructive"
      });
      return;
    }

    setUploading(true);
    
    try {
      const timestamp = Date.now();
      const categoryInfo = imageCategories.find(cat => cat.value === uploadForm.category);

      // Create filename with car model if applicable
      const carModelPrefix = uploadForm.carModel && uploadForm.carModel !== 'general' ? `-${uploadForm.carModel}` : '';
      
      // Upload desktop file
      const desktopFileName = `${uploadForm.category}${carModelPrefix}-${timestamp}-desktop.${uploadForm.desktopFile.name.split('.').pop()}`;
      const desktopUrl = await uploadFileToStorage(uploadForm.desktopFile, desktopFileName);

      // Upload mobile file if provided
      let mobileUrl = null;
      let mobileFileName = null;
      if (uploadForm.mobileFile) {
        mobileFileName = `${uploadForm.category}${carModelPrefix}-${timestamp}-mobile.${uploadForm.mobileFile.name.split('.').pop()}`;
        mobileUrl = await uploadFileToStorage(uploadForm.mobileFile, mobileFileName);
      }

      // Create comprehensive description
      const carModelLabel = carModels.find(car => car.value === uploadForm.carModel)?.label || '';
      const fullDescription = `${uploadForm.description}${carModelLabel ? ` - ${carModelLabel}` : ''}`;

      // Save metadata to database
      const { error } = await supabase
        .from('website_images')
        .insert([{
          name: `${uploadForm.name}${carModelLabel ? ` - ${carModelLabel}` : ''}`,
          url: desktopUrl,
          mobile_url: mobileUrl,
          category: uploadForm.category,
          recommended_size: categoryInfo?.size || "T√πy ch·ªânh",
          description: fullDescription,
          file_name: desktopFileName,
          file_size: uploadForm.desktopFile.size
        }]);

      if (error) throw error;

      toast({
        title: "‚úÖ Upload th√†nh c√¥ng!",
        description: `ƒê√£ upload h√¨nh ·∫£nh cho ${categoryInfo?.label}${carModelLabel ? ` - ${carModelLabel}` : ''}`
      });

      // Reset form and conversion status
      setUploadForm({
        name: "",
        category: "general",
        carModel: "",
        description: "",
        desktopFile: null,
        mobileFile: null
      });
      setConversionStatus({ isConverting: false });

      // Reset file inputs
      const desktopInput = document.getElementById('desktop-file') as HTMLInputElement;
      const mobileInput = document.getElementById('mobile-file') as HTMLInputElement;
      if (desktopInput) desktopInput.value = '';
      if (mobileInput) mobileInput.value = '';

      fetchImages();
    } catch (error) {
      console.error('Error uploading image:', error);
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ upload h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.",
        variant: "destructive"
      });
    } finally {
      setUploading(false);
    }
  };

  const handleDelete = async (id: string, fileName?: string, mobileFileName?: string) => {
    try {
      // Delete files from storage
      if (fileName) {
        await supabase.storage
          .from('website-images')
          .remove([fileName]);
      }
      
      if (mobileFileName) {
        // Extract mobile file name from URL if needed
        const mobileUrl = images.find(img => img.id === id)?.mobile_url;
        if (mobileUrl) {
          const mobilePath = mobileUrl.split('/').pop();
          if (mobilePath) {
            await supabase.storage
              .from('website-images')
              .remove([mobilePath]);
          }
        }
      }

      // Delete record from database
      const { error } = await supabase
        .from('website_images')
        .delete()
        .eq('id', id);

      if (error) throw error;

      toast({
        title: "Th√†nh c√¥ng",
        description: "ƒê√£ x√≥a h√¨nh ·∫£nh"
      });

      fetchImages();
    } catch (error) {
      console.error('Error deleting image:', error);
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ x√≥a h√¨nh ·∫£nh",
        variant: "destructive"
      });
    }
  };

  const getCategoryBadgeColor = (category: string) => {
    const colors: Record<string, string> = {
      hero: "bg-purple-100 text-purple-800",
      car: "bg-blue-100 text-blue-800",
      promotion: "bg-green-100 text-green-800",
      news: "bg-orange-100 text-orange-800",
      gallery: "bg-pink-100 text-pink-800",
      general: "bg-gray-100 text-gray-800"
    };
    return colors[category] || colors.general;
  };

  const selectedCategory = imageCategories.find(cat => cat.value === uploadForm.category);

  if (loading) {
    return <div className="text-center py-8">ƒêang t·∫£i...</div>;
  }

  return (
    <div className="space-y-6">
      {/* Upload Form */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Upload className="w-5 h-5 mr-2" />
            Upload H√¨nh ·∫¢nh M·ªõi
            <Badge variant="outline" className="ml-2 text-xs bg-green-50 text-green-700">
              <Zap className="w-3 h-3 mr-1" />
              Auto WebP
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
              <Label>T√™n h√¨nh ·∫£nh *</Label>
              <Input
                value={uploadForm.name}
                onChange={(e) => setUploadForm(prev => ({ ...prev, name: e.target.value }))}
                placeholder="V√≠ d·ª•: Hero Banner Coolray"
              />
            </div>
            <div>
              <Label>Danh m·ª•c *</Label>
              <Select 
                value={uploadForm.category} 
                onValueChange={(value) => setUploadForm(prev => ({ ...prev, category: value, carModel: "" }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {imageCategories.map((cat) => (
                    <SelectItem key={cat.value} value={cat.value}>
                      {cat.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            {selectedCategory?.requiresCar && (
              <div>
                <Label className="flex items-center">
                  <Car className="w-4 h-4 mr-1" />
                  D√≤ng xe *
                </Label>
                <Select 
                  value={uploadForm.carModel} 
                  onValueChange={(value) => setUploadForm(prev => ({ ...prev, carModel: value }))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Ch·ªçn d√≤ng xe" />
                  </SelectTrigger>
                  <SelectContent>
                    {carModels.map((car) => (
                      <SelectItem key={car.value} value={car.value}>
                        {car.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>

          {/* Category Information Display */}
          {selectedCategory && (
            <Card className="bg-blue-50 border-blue-200">
              <CardContent className="pt-4">
                <div className="flex items-start space-x-2">
                  <Info className="w-5 h-5 text-blue-600 mt-0.5" />
                  <div className="space-y-2">
                    <h4 className="font-semibold text-blue-900">
                      üìç {selectedCategory.label}
                      {selectedCategory.requiresCar && uploadForm.carModel && (
                        <span className="ml-2 text-green-700">
                          ‚Üí {carModels.find(car => car.value === uploadForm.carModel)?.label}
                        </span>
                      )}
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                      <div>
                        <span className="font-medium text-blue-800">üìè K√≠ch th∆∞·ªõc khuy·∫øn ngh·ªã:</span>
                        <p className="text-blue-700">{selectedCategory.size}</p>
                      </div>
                      <div>
                        <span className="font-medium text-blue-800">üìç V·ªã tr√≠ hi·ªÉn th·ªã:</span>
                        <p className="text-blue-700">{selectedCategory.position}</p>
                      </div>
                      <div className="md:col-span-2">
                        <span className="font-medium text-blue-800">üéØ C√°ch s·ª≠ d·ª•ng:</span>
                        <p className="text-blue-700">{selectedCategory.usage}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* File Upload Section */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label className="flex items-center">
                <Monitor className="w-4 h-4 mr-1" />
                H√¨nh ·∫£nh PC/Desktop *
                {conversionStatus.isConverting && (
                  <Badge variant="outline" className="ml-2 text-xs">
                    <Zap className="w-3 h-3 mr-1 animate-spin" />
                    ƒêang chuy·ªÉn ƒë·ªïi...
                  </Badge>
                )}
              </Label>
              <Input
                id="desktop-file"
                type="file"
                accept="image/*"
                onChange={(e) => handleFileChange(e.target.files?.[0] || null, 'desktop')}
                className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
              {uploadForm.desktopFile && (
                <div className="mt-2 space-y-1">
                  <p className="text-sm text-gray-500">
                    {uploadForm.desktopFile.name} ({formatFileSize(uploadForm.desktopFile.size)})
                  </p>
                  {conversionStatus.desktop && (
                    <div className="flex items-center space-x-2 text-xs">
                      <Badge variant="outline" className="bg-green-50 text-green-700">
                        <FileImage className="w-3 h-3 mr-1" />
                        WebP
                      </Badge>
                      <span className="text-green-600">
                        Ti·∫øt ki·ªám {conversionStatus.desktop.compressionRatio}% 
                        ({formatFileSize(conversionStatus.desktop.originalSize)} ‚Üí {formatFileSize(conversionStatus.desktop.convertedSize)})
                      </span>
                    </div>
                  )}
                </div>
              )}
              <p className="text-xs text-gray-500 mt-1">
                üíª Hi·ªÉn th·ªã tr√™n m√°y t√≠nh, laptop, tablet ngang
              </p>
            </div>
            <div>
              <Label className="flex items-center">
                <Smartphone className="w-4 h-4 mr-1" />
                H√¨nh ·∫£nh Mobile (t√πy ch·ªçn)
              </Label>
              <Input
                id="mobile-file"
                type="file"
                accept="image/*"
                onChange={(e) => handleFileChange(e.target.files?.[0] || null, 'mobile')}
                className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
              {uploadForm.mobileFile && (
                <div className="mt-2 space-y-1">
                  <p className="text-sm text-gray-500">
                    {uploadForm.mobileFile.name} ({formatFileSize(uploadForm.mobileFile.size)})
                  </p>
                  {conversionStatus.mobile && (
                    <div className="flex items-center space-x-2 text-xs">
                      <Badge variant="outline" className="bg-green-50 text-green-700">
                        <FileImage className="w-3 h-3 mr-1" />
                        WebP
                      </Badge>
                      <span className="text-green-600">
                        Ti·∫øt ki·ªám {conversionStatus.mobile.compressionRatio}% 
                        ({formatFileSize(conversionStatus.mobile.originalSize)} ‚Üí {formatFileSize(conversionStatus.mobile.convertedSize)})
                      </span>
                    </div>
                  )}
                </div>
              )}
              <p className="text-xs text-gray-500 mt-1">
                üì± Hi·ªÉn th·ªã tr√™n ƒëi·ªán tho·∫°i, tablet d·ªçc (n·∫øu kh√¥ng c√≥ s·∫Ω d√πng ·∫£nh PC)
              </p>
            </div>
          </div>

          <div>
            <Label>M√¥ t·∫£</Label>
            <Input
              value={uploadForm.description}
              onChange={(e) => setUploadForm(prev => ({ ...prev, description: e.target.value }))}
              placeholder="M√¥ t·∫£ ng·∫Øn v·ªÅ h√¨nh ·∫£nh"
            />
          </div>

          <Button 
            onClick={handleUpload} 
            className="w-full" 
            disabled={uploading || conversionStatus.isConverting}
          >
            {uploading ? (
              <>
                <Upload className="w-4 h-4 mr-2 animate-spin" />
                ƒêang upload...
              </>
            ) : conversionStatus.isConverting ? (
              <>
                <Zap className="w-4 h-4 mr-2 animate-spin" />
                ƒêang chuy·ªÉn ƒë·ªïi sang WebP...
              </>
            ) : (
              <>
                <Image className="w-4 h-4 mr-2" />
                Upload H√¨nh ·∫¢nh
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Enhanced WebP Info Card */}
      <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
        <CardHeader>
          <CardTitle className="flex items-center text-green-800">
            <Zap className="w-5 h-5 mr-2" />
            üöÄ T·ª± ƒê·ªông T·ªëi ∆Øu H√¨nh ·∫¢nh WebP
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div className="space-y-2">
              <div className="flex items-center text-green-700">
                <FileImage className="w-4 h-4 mr-2" />
                <span className="font-semibold">T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi</span>
              </div>
              <p className="text-green-600">PNG v√† JPG ‚Üí WebP</p>
            </div>
            <div className="space-y-2">
              <div className="flex items-center text-blue-700">
                <Monitor className="w-4 h-4 mr-2" />
                <span className="font-semibold">Gi·∫£m dung l∆∞·ª£ng</span>
              </div>
              <p className="text-blue-600">25-50% so v·ªõi PNG</p>
            </div>
            <div className="space-y-2">
              <div className="flex items-center text-purple-700">
                <Smartphone className="w-4 h-4 mr-2" />
                <span className="font-semibold">TƒÉng t·ªëc t·∫£i</span>
              </div>
              <p className="text-purple-600">Hi·ªáu su·∫•t cao h∆°n</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Detailed Sizes Guide */}
      <Card>
        <CardHeader>
          <CardTitle>üìê H∆∞·ªõng D·∫´n Chi Ti·∫øt V·ªã Tr√≠ & D√≤ng Xe</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {imageCategories.map((cat) => (
              <div key={cat.value} className="p-4 border rounded-lg space-y-3">
                <div className="flex items-center space-x-2">
                  <Badge className={getCategoryBadgeColor(cat.value)}>
                    {cat.label}
                  </Badge>
                  {cat.requiresCar && (
                    <Badge variant="outline" className="text-xs">
                      üöó C·∫ßn ch·ªçn d√≤ng xe
                    </Badge>
                  )}
                </div>
                
                <div className="space-y-2 text-sm">
                  <div>
                    <span className="font-semibold text-gray-700">üìè K√≠ch th∆∞·ªõc:</span>
                    <p className="text-gray-600">{cat.size}</p>
                  </div>
                  
                  <div>
                    <span className="font-semibold text-gray-700">üìç V·ªã tr√≠ hi·ªÉn th·ªã:</span>
                    <p className="text-gray-600">{cat.position}</p>
                  </div>
                  
                  <div>
                    <span className="font-semibold text-gray-700">üéØ C√°ch s·ª≠ d·ª•ng:</span>
                    <p className="text-gray-600">{cat.usage}</p>
                  </div>
                  
                  {cat.requiresCar && (
                    <div>
                      <span className="font-semibold text-gray-700">üöó D√≤ng xe:</span>
                      <p className="text-gray-600">Coolray, Monjaro, EX5, ho·∫∑c Chung (t·∫•t c·∫£ xe)</p>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <h4 className="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h4>
            <ul className="text-sm text-yellow-700 space-y-1">
              <li>‚Ä¢ <strong>Hero Banner</strong>: Ph·∫£i ch·ªçn d√≤ng xe c·ª• th·ªÉ ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng th√¥ng tin tr√™n trang ch·ªß</li>
              <li>‚Ä¢ <strong>Th∆∞ vi·ªán xe</strong>: Ph·∫£i ch·ªçn d√≤ng xe ƒë·ªÉ hi·ªÉn th·ªã trong gallery chi ti·∫øt t·ª´ng xe</li>
              <li>‚Ä¢ <strong>Khuy·∫øn m√£i/Tin t·ª©c</strong>: Kh√¥ng c·∫ßn ch·ªçn d√≤ng xe, √°p d·ª•ng chung</li>
              <li>‚Ä¢ H√¨nh Mobile ch·ªâ c·∫ßn thi·∫øt cho Hero Banner ƒë·ªÉ t·ªëi ∆∞u hi·ªÉn th·ªã tr√™n ƒëi·ªán tho·∫°i</li>
              <li>‚Ä¢ <strong>üöÄ Auto WebP</strong>: PNG/JPG s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang WebP ƒë·ªÉ t·ªëi ∆∞u dung l∆∞·ª£ng</li>
              <li>‚Ä¢ K√≠ch th∆∞·ªõc file n√™n d∆∞·ªõi 5MB ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô t·∫£i</li>
            </ul>
          </div>
        </CardContent>
      </Card>

      {/* Images List */}
      <Card>
        <CardHeader>
          <CardTitle>üìã Danh S√°ch H√¨nh ·∫¢nh ({images.length})</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>H√¨nh ·∫£nh</TableHead>
                <TableHead>T√™n & D√≤ng xe</TableHead>
                <TableHead>Danh m·ª•c</TableHead>
                <TableHead>K√≠ch th∆∞·ªõc file</TableHead>
                <TableHead>Thi·∫øt b·ªã</TableHead>
                <TableHead>Thao t√°c</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {images.map((image) => (
                <TableRow key={image.id}>
                  <TableCell>
                    <div className="flex space-x-2">
                      <div className="text-center">
                        <img 
                          src={image.url} 
                          alt={`${image.name} - Desktop`}
                          className="w-16 h-12 object-cover rounded border"
                        />
                        <div className="flex items-center justify-center mt-1">
                          <Monitor className="w-3 h-3" />
                        </div>
                      </div>
                      {image.mobile_url && (
                        <div className="text-center">
                          <img 
                            src={image.mobile_url} 
                            alt={`${image.name} - Mobile`}
                            className="w-12 h-16 object-cover rounded border"
                          />
                          <div className="flex items-center justify-center mt-1">
                            <Smartphone className="w-3 h-3" />
                          </div>
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div>
                      <p className="font-medium">{image.name}</p>
                      {image.description && (
                        <p className="text-sm text-gray-500">{image.description}</p>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge className={getCategoryBadgeColor(image.category)}>
                      {imageCategories.find(cat => cat.value === image.category)?.label || image.category}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <p className="text-sm">{formatFileSize(image.file_size)}</p>
                    {image.file_name && (
                      <p className="text-xs text-gray-500">{image.file_name}</p>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-1">
                      <Badge variant="outline" className="text-xs">
                        <Monitor className="w-3 h-3 mr-1" />
                        PC
                      </Badge>
                      {image.mobile_url && (
                        <Badge variant="outline" className="text-xs">
                          <Smartphone className="w-3 h-3 mr-1" />
                          Mobile
                        </Badge>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => window.open(image.url, '_blank')}
                      >
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete(image.id, image.file_name)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
};

export default ImageManagement;
